import type { Problem } from "../../types";

export const problems: Problem[] = [
  {
    id: "fp-map-double",
    title: "FP: Double Array Elements",
    description: "Use the `map` higher-order function to create a new array where each number from the input array is doubled.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers (comma-separated)", type: "text", defaultValue: "1, 2, 3, 4, 5" }],
    buttonText: "Map and Double",
  },
  {
    id: "fp-filter-even",
    title: "FP: Filter for Even Numbers",
    description: "Use the `filter` higher-order function to create a new array containing only the even numbers from the input array.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers (comma-separated)", type: "text", defaultValue: "1, 2, 3, 4, 5, 6, 7, 8" }],
    buttonText: "Filter Evens",
  },
  {
    id: "fp-reduce-sum",
    title: "FP: Sum with Reduce",
    description: "Use the `reduce` higher-order function to calculate the sum of all numbers in an array.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers (comma-separated)", type: "text", defaultValue: "10, 20, 30, 40" }],
    buttonText: "Reduce to Sum",
  },
  {
    id: "currying-simple",
    title: "Simple Currying",
    description: "Create a curried function `add(a)(b)` that takes two numbers in separate function calls and returns their sum.",
    category: "Functional Programming",
    inputs: [
      { id: "num1", label: "First Number", type: "number", defaultValue: 10 },
      { id: "num2", label: "Second Number", type: "number", defaultValue: 20 },
    ],
    buttonText: "Curry Add",
  },
  {
    id: "pure-function-example",
    title: "Pure Function Example",
    description: "Write a pure function `square(n)` that returns the square of a number. It should be deterministic and have no side effects.",
    category: "Functional Programming",
    inputs: [{ id: "num", label: "Number", type: "number", defaultValue: 8 }],
    buttonText: "Calculate Square",
  },
  {
    id: "higher-order-function-basic",
    title: "Higher-Order Function: Basic",
    description: "Create a higher-order function that takes a function as an argument and calls it.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Run HOF",
  },
  {
    id: "immutability-array",
    title: "Immutability with Arrays",
    description: "Demonstrate an immutable way to add an element to an array using the spread syntax, without changing the original array.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array (comma-separated)", type: "text", defaultValue: "a,b,c" }],
    buttonText: "Add Immutably",
  },
  {
    id: "immutability-object",
    title: "Immutability with Objects",
    description: "Demonstrate an immutable way to update a property on an object using the spread syntax.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Update Immutably",
  },
  {
    id: "function-composition",
    title: "Function Composition",
    description: "Create a `compose` function that takes two functions, `f` and `g`, and returns a new function that computes `f(g(x))`.",
    category: "Functional Programming",
    inputs: [{ id: "num", label: "Input Number", type: "number", defaultValue: 5 }],
    buttonText: "Compose and Run",
  },
  {
    id: "fp-reduce-to-object",
    title: "FP: Reduce to Object",
    description: "Use `reduce` to transform an array of key-value pairs into an object.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of pairs (JSON)", type: "textarea", defaultValue: '[["a", 1], ["b", 2]]' }],
    buttonText: "Reduce to Object",
  },
  {
    id: "partial-application",
    title: "Partial Application",
    description: "Create a function `add(a, b)` and use it to create a partially applied function `addTen` that always adds 10 to its argument.",
    category: "Functional Programming",
    inputs: [{ id: "num", label: "Number to add 10 to", type: "number", defaultValue: 5 }],
    buttonText: "Use Partial Function",
  },
  {
    id: "fp-find-first-even",
    title: "FP: Find First Even Number",
    description: "Use the `find` higher-order function to find the first even number in an array.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1,3,5,6,7,8" }],
    buttonText: "Find First Even",
  },
  {
    id: "point-free-style",
    title: "Point-Free Style",
    description: "Rewrite a function that takes an array and doubles its values from `arr => arr.map(x => x * 2)` to a point-free style.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1,2,3" }],
    buttonText: "Run Point-Free",
  },
  {
    id: "side-effects-conceptual",
    title: "Side Effects (Conceptual)",
    description: "Explain what a side effect is in the context of functions and provide examples of impure functions.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Side Effects",
  },
  {
    id: "referential-transparency-conceptual",
    title: "Referential Transparency (Conceptual)",
    description: "Explain the concept of referential transparency, a property of pure functions where a function call can be replaced by its return value without changing the program's behavior.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Concept",
  },
  {
    id: "fp-every-check",
    title: "FP: Check with `every`",
    description: "Use the `every` higher-order function to check if all numbers in an array are greater than 0.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1,5,9,12" }],
    buttonText: "Check if all are positive",
  },
  {
    id: "fp-some-check",
    title: "FP: Check with `some`",
    description: "Use the `some` higher-order function to check if any number in an array is negative.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1,5,-2,8" }],
    buttonText: "Check if any are negative",
  },
  {
    id: "function-piping",
    title: "Function Piping",
    description: "Create a `pipe` function that takes multiple functions and chains them together in a left-to-right sequence.",
    category: "Functional Programming",
    inputs: [{ id: "num", label: "Input Number", type: "number", defaultValue: 5 }],
    buttonText: "Pipe and Run",
  },
  {
    id: "immutable-deep-update",
    title: "Immutable Deep Update",
    description: "Demonstrate how to immutably update a nested property in an object using spread syntax at each level.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Perform Deep Update",
  },
  {
    id: "fp-reduce-right",
    title: "FP: `reduceRight`",
    description: "Use `reduceRight` to process an array from right to left, for example, to reverse a string.",
    category: "Functional Programming",
    inputs: [{ id: "str", label: "String", type: "text", defaultValue: "hello" }],
    buttonText: "Reverse with reduceRight",
  },
  {
    id: "fp-map-objects",
    title: "FP: Map Over Objects",
    description: "Use `.map()` on an array of objects to extract a specific property from each object, creating a new array of those properties.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of Objects (JSON)", type: "textarea", defaultValue: '[{"name": "Alice"}, {"name": "Bob"}]' }],
    buttonText: "Extract Names",
  },
  {
    id: "fp-filter-objects",
    title: "FP: Filter Objects",
    description: "Use `.filter()` on an array of objects to create a new array containing only the objects that meet a certain condition.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of Objects (JSON)", type: "textarea", defaultValue: '[{"name": "Alice", "age": 25}, {"name": "Bob", "age": 30}]' }],
    buttonText: "Filter for Age > 28",
  },
  {
    id: "fp-reduce-max",
    title: "FP: Find Maximum with Reduce",
    description: "Use `.reduce()` to find the maximum number in an array.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1, 9, 2, 8, 5" }],
    buttonText: "Find Max",
  },
  {
    id: "memoization-closure-fp",
    title: "Memoization with Closures",
    description: "Implement a higher-order function `memoize` that takes a function and returns a memoized version of it using a closure for the cache.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test Memoization",
  },
  {
    id: "currying-advanced",
    title: "Advanced Currying",
    description: "Create a generic `curry` function that can convert any multi-argument function into a curried one.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Curry a Function",
  },
  {
    id: "fp-chaining-methods",
    title: "FP: Chaining Methods",
    description: "Chain `.filter()` and `.map()` together to perform a multi-step data transformation in a single statement.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1,2,3,4,5,6" }],
    buttonText: "Filter Evens and Double",
  },
  {
    id: "fp-declarative-vs-imperative",
    title: "Declarative vs. Imperative (Conceptual)",
    description: "Compare the imperative (a `for` loop with an `if` statement) and declarative (`.filter()`) ways of solving the same problem.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Compare Styles",
  },
  {
    id: "fp-first-class-functions",
    title: "First-Class Functions",
    description: "Demonstrate that functions are 'first-class citizens' by storing them in an array and then iterating and calling them.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Call Functions from Array",
  },
  {
    id: "fp-flatmap",
    title: "FP: `flatMap`",
    description: "Use `.flatMap()` to both map over an array and flatten the result by one level.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of sentences", type: "text", defaultValue: "hello world,how are you" }],
    buttonText: "Get All Words",
  },
  {
    id: "fp-sorting-immutably",
    title: "Immutable Sorting",
    description: "Show how to sort an array immutably by first creating a copy using the spread syntax or `.slice()`.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "3,1,4,2" }],
    buttonText: "Sort Immutably",
  },
  {
    id: "fp-group-by",
    title: "FP: Group By with Reduce",
    description: "Use `.reduce()` to group an array of objects by a specific property.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of Objects (JSON)", type: "textarea", defaultValue: '[{"type": "fruit", "name": "apple"}, {"type": "veg", "name": "carrot"}, {"type": "fruit", "name": "banana"}]' }],
    buttonText: "Group by Type",
  },
  {
    id: "fp-transducer-conceptual",
    title: "Transducers (Conceptual)",
    description: "Explain the concept of transducers as a high-performance way to compose multiple transformations (`map`, `filter`) without creating intermediate arrays.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Transducers",
  },
  {
    id: "fp-functor-conceptual",
    title: "Functors (Conceptual)",
    description: "Explain the concept of a Functor as a data structure that can be 'mapped' over, like an Array with its `.map()` method.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Functor",
  },
  {
    id: "fp-monad-conceptual",
    title: "Monads (Conceptual)",
    description: "Provide a simple, high-level explanation of a Monad as a data structure that can be mapped over and 'flattened' (like a Promise or `flatMap`).",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Monad",
  },
  {
    id: "fp-arity",
    title: "Function Arity",
    description: "Explain function arity (the number of arguments a function expects) and its relevance in functional programming, especially for currying.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Arity",
  },
  {
    id: "fp-recursively-map",
    title: "Recursive Mapping",
    description: "Implement a recursive version of the `.map()` function to understand its underlying principles.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array", type: "text", defaultValue: "1,2,3" }],
    buttonText: "Run Recursive Map",
  },
  {
    id: "fp-recursively-filter",
    title: "Recursive Filtering",
    description: "Implement a recursive version of the `.filter()` function.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array", type: "text", defaultValue: "1,2,3,4" }],
    buttonText: "Run Recursive Filter",
  },
  {
    id: "fp-recursively-reduce",
    title: "Recursive Reduce",
    description: "Implement a recursive version of the `.reduce()` function.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array", type: "text", defaultValue: "1,2,3,4" }],
    buttonText: "Run Recursive Reduce",
  },
  {
    id: "fp-identity-function",
    title: "The Identity Function",
    description: "Write an identity function (`x => x`) and explain its role as a default or placeholder in functional programming patterns.",
    category: "Functional Programming",
    inputs: [{ id: "val", label: "Any value", type: "text", defaultValue: "hello" }],
    buttonText: "Run Identity",
  },
  {
    id: "fp-tap-utility",
    title: "The `tap` Utility",
    description: "Create a `tap` function that takes a value, performs a side effect with it (like `console.log`), and then returns the original value. Useful for debugging chains.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `tap`",
  },
  {
    id: "fp-zip-arrays",
    title: "Zip Two Arrays",
    description: "Create a `zip` function that takes two arrays and returns a new array of pairs, where each pair contains one element from each of the original arrays.",
    category: "Functional Programming",
    inputs: [
        { id: "arr1", label: "Array 1", type: "text", defaultValue: "a,b,c" },
        { id: "arr2", label: "Array 2", type: "text", defaultValue: "1,2,3" },
    ],
    buttonText: "Zip Arrays",
  },
  {
    id: "fp-partition-array",
    title: "Partition an Array",
    description: "Create a `partition` function that takes an array and a predicate, and returns an array with two sub-arrays: one with elements that passed the predicate, and one with elements that failed.",
    category: "Functional Programming",
    inputs: [{ id: "arr", label: "Array of numbers", type: "text", defaultValue: "1,2,3,4,5" }],
    buttonText: "Partition Evens/Odds",
  },
  {
    id: "fp-debounce-function",
    title: "Debounce Function",
    description: "Implement a `debounce` higher-order function that delays invoking a function until after a certain amount of time has passed without it being called.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Show Debounce Logic",
  },
  {
    id: "fp-throttle-function",
    title: "Throttle Function",
    description: "Implement a `throttle` higher-order function that ensures a function is only called at most once per every specified time period.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Show Throttle Logic",
  },
  {
    id: "immutable-update-nested-array",
    title: "Immutable Update in Nested Array",
    description: "Demonstrate how to immutably update an item inside an array that is itself a property of an object.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Update Item in Array",
  },
  {
    id: "fp-function-lifting",
    title: "Function Lifting (Conceptual)",
    description: "Explain the concept of 'lifting' a function, where a function that operates on simple values is transformed into a function that operates on values within a context (like an array or promise).",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Lifting",
  },
  {
    id: "fp-applicative-functor-conceptual",
    title: "Applicative Functors (Conceptual)",
    description: "Provide a high-level explanation of an Applicative Functor as a Functor with an `ap` method, which can apply a function inside a context to a value inside another context.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Applicative",
  },
  {
    id: "fp-once-function",
    title: "Create a `once` function",
    description: "Write a higher-order function `once` that takes a function and returns a new function that can only be called one time.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `once`",
  },
  {
    id: "fp-flip-arguments",
    title: "The `flip` Utility",
    description: "Create a `flip` function that takes a binary function (a function with two arguments) and returns a new function that takes its arguments in the reverse order.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `flip`",
  },
  {
    id: "fp-prop-utility",
    title: "The `prop` Utility",
    description: "Create a `prop` function that takes a property name and returns a new function that can retrieve that property from an object.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `prop`",
  },
  {
    id: "fp-idempotence-conceptual",
    title: "Idempotence (Conceptual)",
    description: "Explain the concept of idempotence, where applying an operation multiple times has the same effect as applying it once (e.g., `Math.abs(Math.abs(-10))` is the same as `Math.abs(-10)`).",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Idempotence",
  },
  {
    id: "fp-y-combinator-conceptual",
    title: "Y Combinator (Conceptual)",
    description: "Provide a high-level, conceptual explanation of the Y Combinator as a fixed-point combinator that allows for creating anonymous recursive functions.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Y Combinator",
  },
  {
    id: "fp-monoid-conceptual",
    title: "Monoids (Conceptual)",
    description: "Explain the concept of a Monoid: a type with an associative binary `concat` operation and an `empty` identity value (e.g., Array with concatenation and `[]`).",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Monoid",
  },
  {
    id: "fp-difference-arrays",
    title: "FP: Difference of Arrays",
    description: "Create a function that finds the difference between two arrays (elements in the first array but not the second).",
    category: "Functional Programming",
    inputs: [
      { id: "arr1", label: "First Array", type: "text", defaultValue: "1,2,3,4" },
      { id: "arr2", label: "Second Array", type: "text", defaultValue: "3,4,5" }
    ],
    buttonText: "Find Difference"
  },
  {
    id: "fp-pluck-utility",
    title: "The `pluck` Utility",
    description: "Create a `pluck` function that takes a property name and an array of objects, and returns an array of the values for that property.",
    category: "Functional Programming",
    inputs: [
      { id: "arr", label: "Array of Objects (JSON)", type: "textarea", defaultValue: '[{"name": "Alice"}, {"name": "Bob"}]' },
      { id: "prop", label: "Property to Pluck", type: "text", defaultValue: "name" }
    ],
    buttonText: "Pluck Property"
  },
  {
    id: "fp-memoize-with-key",
    title: "Memoize with Custom Key",
    description: "Create a `memoizeWith` function that is like `memoize`, but takes a key-generating function for more complex caching.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test MemoizeWith"
  },
  {
    id: "fp-unary-function",
    title: "The `unary` Utility",
    description: "Create a `unary` function that takes a multi-argument function and returns a new function that only accepts one argument.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `unary`"
  },
  {
    id: "fp-binary-function",
    title: "The `binary` Utility",
    description: "Create a `binary` function that takes a multi-argument function and returns a new function that only accepts two arguments.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `binary`"
  },
  {
    id: "fp-converge-utility",
    title: "The `converge` Utility",
    description: "Create a `converge` function that takes a converging function and a list of branching functions. The branching functions are applied to the arguments, and their results are passed to the converging function.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `converge`"
  },
  {
    id: "fp-trampoline-recursion",
    title: "Trampolining for Recursion",
    description: "Implement a `trampoline` utility to execute a mutually recursive function without blowing the call stack.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test Trampoline"
  },
  {
    id: "lens-conceptual",
    title: "Lenses (Conceptual)",
    description: "Explain the concept of a Lens as a functional tool for getting and setting values in nested data structures immutably.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Lenses"
  },
  {
    id: "fp-intersection-arrays",
    title: "FP: Intersection of Arrays",
    description: "Create a function that finds the intersection of two arrays (elements present in both).",
    category: "Functional Programming",
    inputs: [
      { id: "arr1", label: "First Array", type: "text", defaultValue: "1,2,3" },
      { id: "arr2", label: "Second Array", type: "text", defaultValue: "2,3,4" }
    ],
    buttonText: "Find Intersection"
  },
  {
    id: "fp-union-arrays",
    title: "FP: Union of Arrays",
    description: "Create a function that finds the union of two arrays (all unique elements from both).",
    category: "Functional Programming",
    inputs: [
      { id: "arr1", label: "First Array", type: "text", defaultValue: "1,2,3" },
      { id: "arr2", label: "Second Array", type: "text", defaultValue: "2,3,4" }
    ],
    buttonText: "Find Union"
  },
  {
    id: "fp-negate-predicate",
    title: "The `negate` Utility",
    description: "Create a `negate` function that takes a predicate function and returns a new predicate function that will return the opposite boolean value.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test `negate`"
  },
  {
    id: "fp-maybe-monad-conceptual",
    title: "Maybe Monad (Conceptual)",
    description: "Explain the Maybe monad (also known as Option) as a way to safely handle `null` or `undefined` values in a functional way, avoiding null checks.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Maybe Monad",
  },
  {
    id: "fp-either-monad-conceptual",
    title: "Either Monad (Conceptual)",
    description: "Explain the Either monad as a way to handle functions that can fail, by returning either a `Right` (success) or a `Left` (error) value.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Explain Either Monad",
  },
  {
    id: "fp-all-any-utilities",
    title: "The `all` and `any` Utilities",
    description: "Create `all` (like `every`) and `any` (like `some`) functions that take a predicate and an array.",
    category: "Functional Programming",
    inputs: [{id: "arr", label: "Array", type: "text", defaultValue: "2,4,7,8"}],
    buttonText: "Test all/any"
  },
  {
    id: "fp-immutable-splice",
    title: "Immutable Splice",
    description: "Write a pure function that mimics `splice` by returning a new array with an element removed, without mutating the original.",
    category: "Functional Programming",
    inputs: [],
    buttonText: "Test Immutable Splice"
  }
];
