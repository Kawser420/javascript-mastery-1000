
import type { Problem } from "../../types";

export const problems: Problem[] = [
  {
    id: "big-o-time-complexity-conceptual",
    title: "Big-O: Time Complexity",
    description: "Explain the concept of Time Complexity using Big-O notation and compare O(1), O(n), and O(nÂ²).",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Time Complexity",
  },
  {
    id: "big-o-space-complexity-conceptual",
    title: "Big-O: Space Complexity",
    description: "Explain Space Complexity and compare O(1) and O(n) space.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Space Complexity",
  },
  {
    id: "unit-test-jest-conceptual",
    title: "Unit Testing with Jest",
    description: "Show the basic structure of a unit test for a simple `sum` function using the Jest testing framework.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Show Jest Test",
  },
  {
    id: "test-driven-development-conceptual",
    title: "Test-Driven Development (TDD)",
    description: "Explain the Red-Green-Refactor cycle of Test-Driven Development (TDD).",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain TDD",
  },
  {
    id: "jest-matchers-conceptual",
    title: "Jest Matchers",
    description: "Explain the role of matchers in Jest and show examples of common matchers like `toBe`, `toEqual`, and `toBeTruthy`.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Show Matchers",
  },
  {
    id: "jest-mocking-conceptual",
    title: "Jest Mocking",
    description: "Explain why you would 'mock' a function or module in a unit test and show a basic example with `jest.fn()`.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Mocking",
  },
  {
    id: "performance-now",
    title: "Measuring with `performance.now()`",
    description: "Use `performance.now()` to get a high-precision timestamp for measuring the execution time of a function.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Measure Duration",
  },
  {
    id: "console-time",
    title: "Measuring with `console.time`",
    description: "Use `console.time()` and `console.timeEnd()` as a simple way to measure the duration of an operation.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Time Operation",
  },
  {
    id: "memoization-performance",
    title: "Memoization for Performance",
    description: "Explain memoization as a performance optimization technique for caching the results of expensive, pure functions.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Memoization",
  },
  {
    id: "tree-shaking-performance",
    title: "Tree Shaking",
    description: "Explain the concept of 'tree shaking' as a dead-code elimination process used by modern bundlers to reduce bundle size.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Tree Shaking",
  },
  {
    id: "code-splitting-performance",
    title: "Code-Splitting & Lazy Loading",
    description: "Explain code-splitting as a technique to split code into smaller chunks that can be loaded on demand (`lazy loaded`) to improve initial page load time.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Code-Splitting",
  },
  {
    id: "browser-profiling-conceptual",
    title: "Browser Performance Profiling",
    description: "Explain how to use the 'Performance' tab in browser developer tools to record a profile and identify JavaScript bottlenecks.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Profiling",
  },
  {
    id: "memory-leaks-debugging-conceptual",
    title: "Debugging Memory Leaks",
    description: "Explain what a memory leak is and how to use the 'Memory' tab in browser developer tools to take heap snapshots and find detached DOM nodes.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Memory Leaks",
  },
  {
    id: "debouncing-performance",
    title: "Debouncing for Performance",
    description: "Explain 'debouncing' as a technique to limit the rate at which a function gets called, improving performance for events like search input.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Debouncing",
  },
  {
    id: "throttling-performance",
    title: "Throttling for Performance",
    description: "Explain 'throttling' to ensure a function is only called at most once per interval, improving performance for events like scrolling.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Throttling",
  },
  {
    id: "performance-observer-conceptual",
    title: "PerformanceObserver API",
    description: "Explain how to use the `PerformanceObserver` API to be notified about new performance entries as they are recorded.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain PerformanceObserver",
  },
  {
    id: "web-vitals-conceptual",
    title: "Core Web Vitals",
    description: "Explain the Core Web Vitals (LCP, INP, CLS) as key metrics for measuring user experience and performance.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Web Vitals",
  },
  {
    id: "integration-testing-conceptual",
    title: "Integration Testing",
    description: "Explain how integration testing differs from unit testing by testing how multiple units work together.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Integration Testing",
  },
  {
    id: "e2e-testing-conceptual",
    title: "End-to-End (E2E) Testing",
    description: "Explain End-to-End testing, which simulates a real user's workflow from start to finish to test the entire application stack.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain E2E Testing",
  },
  {
    id: "critical-rendering-path-conceptual",
    title: "Critical Rendering Path",
    description: "Explain the Critical Rendering Path and why optimizing it (e.g., by inlining critical CSS) is crucial for fast initial page loads.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain CRP",
  },
  {
    id: "big-o-logarithmic-time",
    title: "Big-O: O(log n)",
    description: "Explain O(log n) or logarithmic time complexity with the example of a binary search.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain O(log n)",
  },
  {
    id: "big-o-log-linear-time",
    title: "Big-O: O(n log n)",
    description: "Explain O(n log n) or log-linear time complexity with the example of an efficient sorting algorithm like Merge Sort.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain O(n log n)",
  },
  {
    id: "jest-async-testing",
    title: "Jest: Asynchronous Testing",
    description: "Show how to test asynchronous code in Jest, both with Promises and with `async/await`.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Show Async Test",
  },
  {
    id: "jest-setup-teardown",
    title: "Jest: Setup and Teardown",
    description: "Explain the use of `beforeEach` and `afterEach` hooks in Jest for setting up and tearing down state for tests.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Hooks",
  },
  {
    id: "jest-spies",
    title: "Jest: Spies",
    description: "Explain how to use `jest.spyOn()` to 'spy' on a method's implementation, tracking calls without fully replacing it.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Spies",
  },
  {
    id: "snapshot-testing",
    title: "Snapshot Testing",
    description: "Explain the concept of snapshot testing in Jest, used to track changes in UI components or large data structures.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Snapshot Testing",
  },
  {
    id: "image-optimization-conceptual",
    title: "Image Optimization",
    description: "Explain key performance strategies for images, such as compression, using modern formats (WebP, AVIF), and lazy loading.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Image Optimization",
  },
  {
    id: "caching-strategies-conceptual",
    title: "Caching Strategies",
    description: "Explain different web caching strategies: browser caching (Cache-Control headers), CDNs, and Service Worker caching.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Caching",
  },
  {
    id: "virtualization-lists-conceptual",
    title: "List Virtualization",
    description: "Explain virtualization (or 'windowing') as a performance technique for rendering long lists by only mounting the items currently visible in the viewport.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Virtualization",
  },
  {
    id: "bundle-analysis-conceptual",
    title: "Bundle Analysis",
    description: "Explain how to use a bundle analyzer tool (like `webpack-bundle-analyzer`) to visualize the contents of your production bundle and find large dependencies.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Bundle Analysis",
  },
  {
    id: "first-contentful-paint",
    title: "First Contentful Paint (FCP)",
    description: "Explain the First Contentful Paint (FCP) performance metric, which measures the time until the browser renders the first piece of DOM content.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain FCP",
  },
  {
    id: "time-to-first-byte",
    title: "Time to First Byte (TTFB)",
    description: "Explain the Time to First Byte (TTFB) performance metric, which measures the time from the start of navigation until the first byte of the response is received.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain TTFB",
  },
  {
    id: "time-to-interactive",
    title: "Time to Interactive (TTI)",
    description: "Explain the Time to Interactive (TTI) performance metric, which measures the time until a page is fully interactive (responds to user input).",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain TTI",
  },
  {
    id: "load-testing-vs-stress-testing",
    title: "Load vs. Stress Testing",
    description: "Explain the difference between Load Testing (checking performance under expected load) and Stress Testing (finding the breaking point by pushing beyond expected load).",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Difference",
  },
  {
    id: "code-coverage",
    title: "Code Coverage",
    description: "Explain what a code coverage report is and what its metrics (statement, branch, function coverage) mean for testing.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Coverage",
  },
  {
    id: "static-analysis-tools",
    title: "Static Analysis Tools",
    description: "Explain the role of static analysis tools like ESLint (for finding bugs) and Prettier (for formatting) in improving code quality and maintainability.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Static Analysis",
  },
  {
    id: "web-worker-performance",
    title: "Web Workers for Performance",
    description: "Explain how to offload a computationally expensive, synchronous task to a Web Worker to prevent it from blocking the main UI thread.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Worker Offloading",
  },
  {
    id: "server-side-rendering-performance",
    title: "SSR for Performance",
    description: "Explain how Server-Side Rendering (SSR) can improve perceived performance by delivering a fully rendered HTML page, improving FCP and LCP.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain SSR",
  },
  {
    id: "cdn-performance",
    title: "CDN for Performance",
    description: "Explain how a Content Delivery Network (CDN) improves performance by caching assets geographically closer to users, reducing latency.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain CDNs",
  },
  {
    id: "database-n-plus-one-problem",
    title: "N+1 Query Problem",
    description: "Explain the N+1 query problem, a common performance bottleneck where code makes 1 query to get a list of items, and then N subsequent queries to get details for each item.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain N+1 Problem",
  },
  {
    id: "css-selectors-performance",
    title: "CSS Selector Performance",
    description: "Explain why some CSS selectors are more performant than others (e.g., ID and class selectors are faster than descendant or universal selectors).",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Selector Performance",
  },
  {
    id: "layout-thrashing-conceptual",
    title: "Layout Thrashing",
    description: "Explain what 'layout thrashing' is: a performance issue caused by mixing DOM reads and writes in a loop, forcing the browser to perform repeated, unnecessary layout calculations.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Layout Thrashing",
  },
  {
    id: "regression-testing-conceptual",
    title: "Regression Testing",
    description: "Explain regression testing as the process of re-running tests to ensure that a new change has not broken any existing functionality.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Regression Testing",
  },
  {
    id: "visual-regression-testing-conceptual",
    title: "Visual Regression Testing",
    description: "Explain visual regression testing, where screenshots of UI components are taken and compared against baseline images to detect unintended visual changes.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Visual Testing",
  },
  {
    id: "accessibility-testing-conceptual",
    title: "Accessibility (a11y) Testing",
    description: "Explain the importance of accessibility testing and show examples of tools (like Axe) and manual checks (like keyboard navigation) to ensure an application is usable by everyone.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain a11y Testing",
  },
  {
    id: "fuzz-testing-conceptual",
    title: "Fuzz Testing (Fuzzing)",
    description: "Explain the concept of fuzz testing, a technique where random, invalid, or unexpected data is passed as input to a program to find security vulnerabilities and crashing bugs.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Fuzzing",
  },
  {
    id: "property-based-testing-conceptual",
    title: "Property-Based Testing",
    description: "Explain property-based testing, where instead of testing specific inputs, you test that certain properties or invariants of your function hold true for a large number of randomly generated inputs.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Property-Based Tests",
  },
  {
    id: "mutation-testing-conceptual",
    title: "Mutation Testing",
    description: "Explain mutation testing as a technique for evaluating the quality of your tests by introducing small defects ('mutants') into your code and checking if your tests can 'kill' (detect) them.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Mutation Testing",
  },
  {
    id: "alpha-beta-testing-conceptual",
    title: "Alpha vs. Beta Testing",
    description: "Explain the difference between Alpha testing (internal testing by the development team) and Beta testing (testing by a limited external audience before a full release).",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Alpha/Beta Testing",
  },
  {
    id: "performance-budget-conceptual",
    title: "Performance Budget",
    description: "Explain the concept of a performance budget: a set of limits for metrics that affect site performance (e.g., LCP < 2.5s, bundle size < 170KB) that the team agrees not to exceed.",
    category: "Testing & Performance",
    inputs: [],
    buttonText: "Explain Performance Budget",
  },
];
