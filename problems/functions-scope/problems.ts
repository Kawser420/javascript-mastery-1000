import { Problem } from '../../types';

export const problems: Problem[] = [
    {
        id: 'simple-function-return',
        title: 'Simple Function Return',
        description: 'Define a function that takes no arguments and returns the string "Hello, Functions!".',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Call Function',
    },
    {
        id: 'function-with-parameters',
        title: 'Function with Parameters',
        description: 'Write a function that takes two numbers as parameters and returns their product.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'a', label: 'First Number', type: 'number', defaultValue: 8 },
            { id: 'b', label: 'Second Number', type: 'number', defaultValue: 4 },
        ],
        buttonText: 'Calculate Product',
    },
    {
        id: 'arrow-function-syntax',
        title: 'Arrow Function Syntax',
        description: 'Rewrite a simple function that calculates the square of a number using the more concise arrow function syntax.',
        category: 'Functions & Scope',
        inputs: [
             { id: 'num', label: 'Number', type: 'number', defaultValue: 9 },
        ],
        buttonText: 'Square with Arrow',
    },
    {
        id: 'function-declaration',
        title: 'Function Declaration',
        description: 'Create a function using the `function` keyword. This method of creating functions is subject to hoisting.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Declare and Call',
    },
    {
        id: 'function-expression',
        title: 'Function Expression',
        description: 'Create a function by assigning an anonymous function to a variable. These are not fully hoisted.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Create Expression',
    },
    {
        id: 'default-parameters',
        title: 'Default Parameters',
        description: 'Write a function that greets a user, but defaults to "Guest" if no name is provided.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'name', label: 'Name (optional)', type: 'text', placeholder: 'Leave blank for default' },
        ],
        buttonText: 'Greet User',
    },
    {
        id: 'rest-parameters-sum',
        title: 'Rest Parameters for Summation',
        description: 'Write a function that uses rest parameters to accept any number of arguments and returns their sum.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'numbers', label: 'Numbers (comma-separated)', type: 'text', defaultValue: '1, 2, 3, 4, 5' },
        ],
        buttonText: 'Sum All',
    },
    {
        id: 'iife-pattern',
        title: 'Immediately Invoked Function Expression (IIFE)',
        description: 'Use an IIFE to create a private scope and execute a function immediately upon definition.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Run IIFE',
    },
    {
        id: 'hoisting-declaration',
        title: 'Hoisting: Function Declaration',
        description: 'Demonstrate that a function declaration can be called before it is defined in the code due to hoisting.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Hoisting',
    },
    {
        id: 'hoisting-expression-var',
        title: 'Hoisting: Function Expression (var)',
        description: 'Show that a function expression assigned to a `var` is hoisted, but only the variable declaration, not the function assignment, resulting in an error.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test `var` Hoisting',
    },
    {
        id: 'global-scope',
        title: 'Global Scope',
        description: 'Declare a variable in the global scope and access it from within a function.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Access Global Var',
    },
    {
        id: 'function-scope',
        title: 'Function Scope',
        description: 'Show that a variable declared with `var` inside a function is not accessible from outside that function.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Function Scope',
    },
    {
        id: 'block-scope-let',
        title: 'Block Scope with `let`',
        description: 'Demonstrate that a variable declared with `let` inside a block (e.g., an if-statement) is not accessible outside that block.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Block Scope',
    },
    {
        id: 'scope-chain',
        title: 'Scope Chain',
        description: 'Demonstrate the scope chain by having a deeply nested function access a variable from its grandparent scope.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Scope Chain',
    },
    {
        id: 'pure-function',
        title: 'Pure Function Example',
        description: 'Write a pure function that takes a number and returns its value doubled. A pure function always returns the same output for the same input and has no side effects.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'num', label: 'Number', type: 'number', defaultValue: 10 },
        ],
        buttonText: 'Double Purely',
    },
    {
        id: 'impure-function',
        title: 'Impure Function Example',
        description: 'Write an impure function that modifies an external variable. Its output is not solely determined by its input.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Run Impure Function',
    },
    {
        id: 'higher-order-function-argument',
        title: 'Higher-Order Function: Passing a Function',
        description: 'Create a higher-order function that takes a number and a function as arguments, and applies the function to the number.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'num', label: 'Number', type: 'number', defaultValue: 5 },
        ],
        buttonText: 'Apply Function',
    },
    {
        id: 'higher-order-function-return',
        title: 'Higher-Order Function: Returning a Function',
        description: 'Create a higher-order function that returns a new function. The returned function should multiply its argument by a specific number.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'multiplier', label: 'Multiplier', type: 'number', defaultValue: 3 },
            { id: 'num', label: 'Number to Multiply', type: 'number', defaultValue: 7 },
        ],
        buttonText: 'Create and Use Multiplier',
    },
    {
        id: 'sync-callback',
        title: 'Synchronous Callback',
        description: 'Create a function that processes an array and executes a callback function for each item.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'arr', label: 'Array (comma-separated)', type: 'text', defaultValue: 'apple, banana, cherry' },
        ],
        buttonText: 'Process with Callback',
    },
    {
        id: 'arguments-object',
        title: 'The `arguments` Object',
        description: 'Write a function using the `function` keyword that uses the array-like `arguments` object to sum all values passed to it.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'numbers', label: 'Numbers (comma-separated)', type: 'text', defaultValue: '10, 20, 30' },
        ],
        buttonText: 'Sum with `arguments`',
    },
    {
        id: 'object-method-this',
        title: 'Object Method and `this`',
        description: 'Create an object with a method that uses the `this` keyword to access another property of the same object.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Call Object Method',
    },
    {
        id: 'this-global-scope',
        title: '`this` in the Global Scope',
        description: 'Demonstrate what `this` refers to in the global scope in a browser environment (non-strict mode).',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Check Global `this`',
    },
    {
        id: 'this-arrow-function-lexical',
        title: 'Lexical `this` in Arrow Functions',
        description: 'Show how an arrow function does not have its own `this` binding but inherits it from the surrounding (lexical) scope.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Arrow Function `this`',
    },
    {
        id: 'function-call-method',
        title: 'Function `.call()` Method',
        description: 'Use the `.call()` method to invoke a function with a specified `this` context and individual arguments.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Use `.call()`',
    },
    {
        id: 'function-apply-method',
        title: 'Function `.apply()` Method',
        description: 'Use the `.apply()` method to invoke a function with a specified `this` context and arguments provided as an array.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Use `.apply()`',
    },
    {
        id: 'function-bind-method',
        title: 'Function `.bind()` Method',
        description: 'Use the `.bind()` method to create a new function that, when called, has its `this` keyword set to a provided value.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Use `.bind()`',
    },
    {
        id: 'recursive-countdown',
        title: 'Recursive Countdown',
        description: 'Write a simple recursive function that logs a countdown from a given number to 1.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'num', label: 'Start from', type: 'number', defaultValue: 5 },
        ],
        buttonText: 'Start Countdown',
    },
    {
        id: 'first-class-functions',
        title: 'First-Class Functions',
        description: 'Demonstrate that functions are "first-class citizens" in JavaScript by assigning a function to a variable and then invoking it.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test First-Class Function',
    },
    {
        id: 'named-function-expression',
        title: 'Named Function Expression',
        description: 'Create a named function expression. The name is only accessible within the function itself, which is useful for debugging or recursion.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Run Named Expression',
    },
    {
        id: 'function-shadowing',
        title: 'Variable Shadowing',
        description: 'Demonstrate variable shadowing, where a variable in an inner scope has the same name as a variable in an outer scope.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Shadowing',
    },
    {
        id: 'anonymous-function',
        title: 'Anonymous Function',
        description: 'Show an example of an anonymous function, often used as an argument to another function (a callback).',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Use Anonymous Function',
    },
    {
        id: 'implicit-return-arrow',
        title: 'Implicit Return in Arrow Functions',
        description: 'Showcase the implicit return feature of single-expression arrow functions without curly braces.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'num', label: 'Number', type: 'number', defaultValue: 7 },
        ],
        buttonText: 'Test Implicit Return',
    },
    {
        id: 'function-length-property',
        title: 'Function `.length` Property',
        description: 'Demonstrate the `.length` property of a function, which indicates the number of named parameters it expects.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Get Function Length',
    },
    {
        id: 'scope-let-vs-var-loop',
        title: '`let` vs. `var` in Loops',
        description: 'Demonstrate the common pitfall of using `var` in a loop with an asynchronous callback, and how `let` solves it with block scope.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Run Loop Test',
    },
    {
        id: 'pass-by-value',
        title: 'Pass by Value (Primitives)',
        description: 'Demonstrate that primitive types (string, number, boolean) are passed by value to functions. Modifying them inside the function does not affect the original variable.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Pass by Value',
    },
    {
        id: 'pass-by-reference',
        title: 'Pass by Reference (Objects)',
        description: 'Demonstrate that objects (including arrays) are passed by reference. Modifying an object property inside a function affects the original object.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Pass by Reference',
    },
    {
        id: 'function-constructor',
        title: 'Function Constructor (Conceptual)',
        description: 'Show the syntax for the `Function` constructor. Note: This is generally not recommended due to security and performance reasons, but is part of the language.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Show Constructor Syntax',
    },
    {
        id: 'currying-multiply',
        title: 'Currying for Multiplication',
        description: 'Create a curried function `multiply(a)(b)(c)` that takes three numbers in separate calls and returns their product.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'a', label: 'First Number', type: 'number', defaultValue: 2 },
            { id: 'b', label: 'Second Number', type: 'number', defaultValue: 3 },
            { id: 'c', label: 'Third Number', type: 'number', defaultValue: 4 },
        ],
        buttonText: 'Curry Multiply',
    },
    {
        id: 'partial-application',
        title: 'Partial Application with `.bind()`',
        description: 'Use `.bind()` to create a partially applied function. Pre-set some arguments of a function to create a new, simpler function.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Create Partial Function',
    },
    {
        id: 'this-event-handler',
        title: '`this` in an Event Handler',
        description: 'Conceptually show how `this`, in a traditional function used as an event handler, refers to the element that triggered the event.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Show `this` in Handler',
    },
    {
        id: 'function-as-object-property',
        title: 'Function as an Object Property',
        description: 'Create a "config" object that stores a function as one of its properties.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Run Config Function',
    },
    {
        id: 'hoisting-var-declaration',
        title: 'Hoisting: `var` Declaration',
        description: 'Demonstrate that `var` declarations are hoisted to the top of their scope, but their assignments are not, resulting in `undefined`.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test `var` Hoisting',
    },
    {
        id: 'temporal-dead-zone-let',
        title: 'Temporal Dead Zone (`let`)',
        description: 'Show that accessing a `let` variable before its declaration results in a `ReferenceError` due to the Temporal Dead Zone (TDZ).',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test TDZ',
    },
    {
        id: 'arrow-function-no-arguments',
        title: 'Arrow Functions Have No `arguments` Object',
        description: 'Demonstrate that arrow functions do not have their own `arguments` object, but can use rest parameters instead.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test `arguments` in Arrow',
    },
    {
        id: 'iife-with-params',
        title: 'IIFE with Parameters',
        description: 'Show how to pass arguments into an IIFE to provide it with initial values.',
        category: 'Functions & Scope',
        inputs: [
            { id: 'param', label: 'Parameter to pass', type: 'text', defaultValue: 'Hello IIFE' },
        ],
        buttonText: 'Run IIFE with Param',
    },
    {
        id: 'function-overwriting',
        title: 'Function Overwriting',
        description: 'Demonstrate how, in JavaScript, defining a function with the same name as a previous one will overwrite the original.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Overwriting',
    },
    {
        id: 'callback-hell-conceptual',
        title: 'Callback Hell (Conceptual)',
        description: 'Show a conceptual example of "callback hell" or the "pyramid of doom," which modern Promises and async/await are designed to solve.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Show Callback Hell',
    },
    {
        id: 'this-binding-new',
        title: '`this` with the `new` Keyword',
        description: 'Show that when a function is called with the `new` keyword (as a constructor), `this` is bound to the newly created object.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test `new` Binding',
    },
    {
        id: 'this-strict-mode',
        title: '`this` in Strict Mode',
        description: 'Demonstrate that in strict mode, `this` is `undefined` in a regular function call, preventing accidental access to the global object.',
        category: 'Functions & Scope',
        inputs: [],
        buttonText: 'Test Strict Mode `this`',
    },
];